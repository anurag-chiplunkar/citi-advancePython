https://codeshare.io/Odny4P

Day-1
# To create virtual env
1. create a folder inside documents, name it: proj-1
1.1 create 3 such folders
2. to create sourceCode folder inside respective proj folders
3. to open the cmd from the address bar of the respective folder(proj-1)
3.1 you will be inside the resp folder
4. to create virtual env:
4.1 type: "python -m venv .venv"
4.2 to navigate inside the .venv folder: "cd .venv"
4.3 to start the virtual env: "Scripts\activate"
4.4 to come out of the .venv folder: "cd.."
5. to check existing lib: pip list
6. to install new lib: pip install <libName>
6.1 example: "pip install numpy"
6.2 example: "pip install pandas"
7. to check installed lib: "pip list"

8. to create a requirements file: "pip freeze > requirements.txt"
9. to install using requirements.txt file: "pip install -r requirements.txt"
10. to uninstall any specific library: pip uninstall <packageName>
11. to uninstall in one go: pip uninstall -y -r requirements.txt

-----------------------------------# list comprehension
# Using a traditional loop:
numbers = [1, 2, 3, 4, 5]
squares = []
for num in numbers:
    squares.append(num**2)

print(squares)  # Output: [1, 4, 9, 16, 25]



-----------------------------------# Using list comprehension:
numbers = [1, 2, 3, 4, 5]
squares = [num**2 for num in numbers if num%2 == 0]

print("This is from list comprehension: ", squares)  # Output: [1, 4, 9, 16, 25]


-----------------------------------# dict comprehensions
numbers = [1,2,3,4,5]

squares = {num:num**2 for num in numbers}
print(squares)


-----------------------------------# custom functions
# type 1
def additions(a: int, b: int):
    result = a + b
    return result

# type 2
def message():
    print("Good Morning!")

print(additions(10, 20))
# message()

------------------------------------# file handling modes
SN	Access mode	Description
1	r	It opens the file to read-only mode. The file pointer exists at the beginning. The file is by default open in this mode if no access mode is passed.
2	rb	It opens the file to read-only in binary format. The file pointer exists at the beginning of the file.
3	r+	It opens the file to read and write both. The file pointer exists at the beginning of the file.
4	rb+	It opens the file to read and write both in binary format. The file pointer exists at the beginning of the file.
5	w	It opens the file to write only. It overwrites the file if previously exists or creates a new one if no file exists with the same name. The file pointer exists at the beginning of the file.
6	wb	It opens the file to write only in binary format. It overwrites the file if it exists previously or creates a new one if no file exists. The file pointer exists at the beginning of the file.
7	w+	It opens the file to write and read both. It is different from r+ in the sense that it overwrites the previous file if one exists whereas r+ doesn't overwrite the previously written file. It creates a new file if no file exists. The file pointer exists at the beginning of the file.
8	wb+	It opens the file to write and read both in binary format. The file pointer exists at the beginning of the file.
9	a	It opens the file in the append mode. The file pointer exists at the end of the previously written file if exists any. It creates a new file if no file exists with the same name.
10	ab	It opens the file in the append mode in binary format. The pointer exists at the end of the previously written file. It creates a new file in binary format if no file exists with the same name.
11	a+	It opens a file to append and read both. The file pointer remains at the end of the file if a file exists. It creates a new file if no file exists with the same name.
12	ab+	It opens a file to append and read both in binary format. The file pointer remains at the end of the file.


------------------------------------# file Handling
# Opening the file in read mode
# with open("sample.txt", "r") as file:
#     contents = file.read()

# print(contents)

# data_to_write = "This is some data to write to the file."

# # Opening the file in write mode
# with open("new_file.txt", "w") as file:
#     file.write(data_to_write)


data_to_append = "\nThis is some additional data."

# Opening the file in append mode
with open("new_file.txt", "a") as file:
    file.write(data_to_append)

---------------------------------# init file for creating package
import dictComprehension
import listComprehension
import filehandling
from customFunctions import message
from customFunctions import additions


from sourceCode import *